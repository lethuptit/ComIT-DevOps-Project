---
- hosts: ec2-instance
  become: true
  vars:
    container_count: 4
    container_name: docker_web
    container_image: ubuntu
    container_command: sleep 1d
  tasks:
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce and docker-compose
      apt:
        pkg:
          - docker-ce
          - docker-compose
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Pull default Docker image
      docker_image:
        name: "{{ container_image }}"
        source: pull

    - name: Creating folder and copying html file
      file:
        path: "/myfile"
        state: directory

    - name: Copying local files
      copy:
        src: "index.html"
        dest: "/myfile/"

    #- name: Add docker credentials for ubuntu user
    #  copy: src=.docker/dockercfg.json dest=/root/.dockercfg
    - name: Create PostgresDB container
      docker_container:
        name: postgresDB
        image: postgres
        state: started
        recreate: yes
        ports:
          - "5432:5432"
        volumes:
          #- /home/hitch_postgres_data:/var/lib/postgresql/data
          - ./db/myquery.sql:/docker-entrypoint-initdb.d/query.sql
        #env:
        #  POSTGRES_USER: "myuser"
        #  POSTGRES_PASSWORD: "myuser"

- hosts: ec2-instance
  become: false
  tasks:
    - name: Creating container using HTTPD Image
      docker_container:
        name: "MyWebServer" #"{{container_name}}""
        image: "httpd" 
        #image: "654654452340.dkr.ecr.us-east-1.amazonaws.com/test:latest" #"{{ container_image }}"
        state: started
        debug: no
        pull: yes
        exposed_ports:
        - "8000"
        ports:
        - "80:8000"
        volumes:
        - /myWebApp:/usr/local/apache2/htdocs/
      register: container_output  #return output of the container

    #- name: Get its output
    #debug:
    #  msg: "Docker said: {{ container_output.Output }}"



