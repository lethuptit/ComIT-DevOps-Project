---
- hosts: ec2-instance
  become: true
  #become_method: sudo
  vars:
    container_count: 4
    container_name: docker_web
    container_image: ubuntu
    container_command: sleep 1d
  tasks:
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce and docker-compose
      apt:
        pkg:
          - docker-ce
          - docker-compose
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Pull default Docker image
      docker_image:
        name: "{{ container_image }}"
        source: pull

    - name: Creating folder and copying html file
      file:
        path: "/ComIT-Project"
        state: directory

    - name: Copying DB script
      copy:
        src: "."
        dest: "/ComIT-Project/"

    - name: Copying web source files
      copy:
        src: "index.html"
        dest: "/ComIT-Project/"
      

    #- name: Add docker credentials for ubuntu user
    #  copy: src=.docker/dockercfg.json dest=/root/.dockercfg

    #- name: pull image postgres9.6.0
    #  docker_image:
    #    name: postgres
    #    state: present

    - name: add user mod
      command: sudo usermod -aG docker ubuntu   

    - name: Create PostgresDB container
      docker_container:
        name: postgresDB
        image: postgres:10.0-alpine
        state: started
        detach: yes
        restart_policy: always
        recreate: yes
        ports:
          - "5432:5432"
        volumes:
          #- /home/hitch_postgres_data:/var/lib/postgresql/data
          #- /ComIT-Project/myquery.sql:/docker-entrypoint-initdb.d/query.sql
          - /ComIT-Project/myquery.sql:/docker-entrypoint-initdb.d/query.sql
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
          POSTGRES_DB: flask_db
          #POSTGRES_HOST_AUTH_METHOD: trust
          #POSTGRES_PASSWORD: "password"
          #-e PGADMIN_DEFAULT_EMAIL: "thule1710@gmail.com"
          #-e PGADMIN_DEFAULT_PASSWORD: "postgresmaster"
      #register: docker_output

    - name: Run DB
      #command: docker run -d   postgres:10.0-alpine
      command: docker restart postgresDB 

    #- name: Show test output
    #  debug:
        #msg: "Output: {{ docker_output.Output }}" 
    #    msg: "DB created." 

    #- name: docker started
    #  service: name=postgresDB state=restarted
    - name: Creating container using HTTPD Image
      docker_container:
        name: "MyWebServer" #"{{container_name}}""
        image: "httpd" 
        #image: "654654452340.dkr.ecr.us-east-1.amazonaws.com/test:latest" #"{{ container_image }}"
        state: started
        #debug: no
        #pull: yes
        exposed_ports:
        - "80"
        ports:
        - "80:80"
        volumes:
        - /ComIT-Project:/usr/local/apache2/htdocs/
      #depends_on:
      #- postgresDB
      #register: container_output  #return output of the container

- hosts: ec2-instance
  become: false
  tasks:
    - name: Creating container using HTTPD Image
      docker_container:
        name: "MyWebServer" #"{{container_name}}""
        #image: "httpd" 
        image: "654654452340.dkr.ecr.us-east-1.amazonaws.com/test:latest" #"{{ container_image }}"
        state: started
        #debug: no
        pull: yes
        exposed_ports:
        - "5000"
        ports:
        - "8080:5000"
        volumes:
        - /ComIT-Project:/usr/local/apache2/htdocs/
      #depends_on:
      #- postgresDB
      #register: container_output  #return output of the container

    #- name: Get its output
    #debug:
    #  msg: "Docker said: {{ container_output.Output }}"

    #- name: Remove the test container
    #  docker_container:
        #state: absent
        #name: "foo-container"


- hosts: ec2-instance
  gather_facts: no
  tasks:        
    - name: Docker compose
      command: docker compose -f docker-compose.yml up -d